# 달팽이는 올라가고 싶다

# 달팽이는 높이가 V미터인 나무 막대를 올라간다.
# 낮에 A미터 올라갈 수 있다. 하지만, 밤에 잠을 자는 동안 B미터 미끄러진다.
# 정상에 도착한 경우 미끄러지지 않는다. 달팽이가 나무 막대를 모두 올라가려면, 며칠이 걸리는지 구하는 프로그램을 작성

# 첫째 줄에 세 정수 A, B, V가 공백으로 구분되어서 주어진다. (1 ≤ B < A ≤ V ≤ 1,000,000,000)
# 첫째 줄에 달팽이가 나무 막대를 모두 올라가는데 며칠이 걸리는지 출력

# 반복문을 이용하면 될 것 같은데 값이 엄청 크다. 그리고 시간 제한 또한 0.25초 
# 때문에 공식을 만들어 단순 계산하는 것이 목적인듯 하다.

# 입력으로 낮 A, 밤 B, 사다리 V 를 공백 기준으로 입력 받는다.
# 그 후 A - B를 하고나온 C 값에 V를 나눠주면 끝 아닌가?
# 예제 몇개를 통과하긴하나 몇개가 예제와 다르게 나온다.

# 아무래도 정상에 도착한 후 미끄러지지 않는다 이 조건이 꽤나 중요한가 보다.

# A(낮 이동거리), B(밤 미끌어지는 거리), V(목표 거리)
# 공식 자체는 유효하다. (목표 거리(V) / 하루 이동거리(A(낮) - B(밤)) = 도달 일수)
# 아무래도 낮에 A 만큼 이동하여 V에 도달하면 밤에 미끌어지지 않으니 그날은 A만 딱 진행한 것이 된다.
# 이것을 코드로 구현하면 될 듯하다.
# 목표에 낮 동안 이동한 거리를 딱 빼준다. 
# 그러면 다음날 낮에 이동할 거리만 딱 더하면 몇일이 걸리는지 정확한 값이 나올 것이다.
# 식을 수정해야한다. V(목표거리) - A(낮) / A - B

# 놓친점이 있는데 결과 일수가 소수점이 나오는 경우다.
# 이럴경우 하루로 쳐주는 것이 맞다.
# 시간을 구하는 것이 아닌 하루를 구하는 것이니 0.001만 증가해도 하루가 소모된 것이다.

# Q: 그래서 목표거리에서 A만큼 제외한 상태에서 이미 하루만큼의 보상으로 1을 더해준 것이 아니냐? 
# A: 맞다 하지만 이 소수점의 원인은 목표거리(V)에서 이동거리(A)를 뺏기 때문에 발생하는게 아니기 때문이다.

# 예제 입력 2에도 나와있다. 
# 입력으로 5(A) 1(B) 6(V)으로 입력한다. 
# 이 경우 식을 그대로 이용하면 6(V)-5(A)/5(A)-1(B) = 1/4 = 0.25 이러한 값이 나온다. 
# 위에서 말했듯이 0.25 또한 하루를 사용한 것이다. 
# 하지만 출력에서는 소모된 일수를 자연수 형태로 출력하는 것을 요구한다. 
# 시간이 아닌 이상 몇일 이라는 단위에 0.25일 이란건 없다.
# 그렇기에 소수점의 경우 하루로 바꿔주면 된다. 
# 대부분 언어에 반올림 내장 함수가 있으니 그것을 이용하면 된다.
# 이렇게 반올림 된 값에 이제서야 낮 동안의 거리를 제외한 보상인 +1일 추가하면 된다.

import math

A, B, V = map(int, input().split())

print(math.ceil((V - A)/(A - B)+1))