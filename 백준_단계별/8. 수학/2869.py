# 달팽이는 올라가고 싶다

# 달팽이는 높이가 V미터인 나무 막대를 올라간다.
# 낮에 A미터 올라갈 수 있다. 하지만, 밤에 잠을 자는 동안 B미터 미끄러진다.
# 정상에 도착한 경우 미끄러지지 않는다. 달팽이가 나무 막대를 모두 올라가려면, 며칠이 걸리는지 구하는 프로그램을 작성

# 첫째 줄에 세 정수 A, B, V가 공백으로 구분되어서 주어진다. (1 ≤ B < A ≤ V ≤ 1,000,000,000)
# 첫째 줄에 달팽이가 나무 막대를 모두 올라가는데 며칠이 걸리는지 출력

# 반복문을 이용하면 될 것 같은데 값이 엄청 크다. 그리고 시간 제한 또한 0.25초 
# 때문에 공식을 만들어 단순 계산하거나 반복문 절차를 최적화 해야할 듯 하다.

# 입력으로 낮 A, 밤 B, 사다리 V 를 공백 기준으로 입력 받는다.
# 그 후 A - B를 하고나온 C 값에 V를 나눠주면 끝 아닌가?

# 아무래도 정상에 도착한 후 미끄러지지 않는다 이 조건이 꽤나 중요한가 보다.

import math

A, B, V = map(int, input().split())

# (V - A) / (A - B) 만큼 올라간 후 마지막 날 A만큼 올라가면 정상에 도달합니다.
# (V - A)를 (A - B)로 나눈 몫을 올림 처리하고 1을 더합니다.
day = math.ceil((V - A) / (A - B)) + 1

# 하지만, 달팽이가 하루 만에 V에 도달하거나, (V-A)가 (A-B)로 나누어 떨어지는 경우
# 즉, (V-A) % (A-B) == 0인 경우에는 하루가 덜 걸립니다.
# 따라서 이 경우에는 1을 빼줍니다.
if (V - A) % (A - B) == 0:
    day -=1

print(day)