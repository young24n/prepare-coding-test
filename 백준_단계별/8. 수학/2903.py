# 중앙 이동 알고리즘

# 1. (최초 시도에만)정사각형을 이루는 각 꼭짓점에 점을 추가한다.
# 2. 정사각형의 각 변의 중앙에 점을 하나씩 추가한다.
# 3. 정사각형의 중심에 점을 하나 추가한다.
# 해당 과정을 거치면서 큰 정사각형 1 개 -> 4개로 변한다. 점은 4 -> 9개가 된다.
# 과정 2, 3번을 반복할 수 있는데 이때 반복한 횟수를 입력했을 때 생성되는 점이 몇개인지 출력하라
# 꼭짓점이 겹치는 점은(중복되는 점들은) 1개로 취급되니 주의(생성되는 정사각형의 갯수로 점의 갯수를 단순하게 구하지 말라는 뜻인듯)

# 수학과 관련되어 있다보니 규칙성을 찾아야 한다. 
# 1회 반복시 내부에 정사각형 4개가 생성된다. 
# 2회에는 4개 정사각형 내부에서 또 각각 4개씩 정사각형이 생긴다.

# 정석 방법은 모르겠으나 나는 하나의 변을 기준으로 계산하기로 했다.
# (X 이것은 일시적이였다.)한 변을 계속 관찰했을 때 점이 양 끝단에 1개씩 추가된다. 
# (X 이것은 일시적이였다.)즉 2개의 점이 1회마다 하나의 변에 추가된다. 1회 -> 2회 -> 3회 = 3개 -> 5개 -> 7개
# (X 이것은 일시적이였다.)기준 1회 3개에서 회수가 추가될 때마다 2개씩 더해주고 최종적으로 나온 점 갯수를 제곱하면 전체의 점 갯수를 구할 수 있다.

# 조금 더 기하급수적으로 오른다.
# 하나의 변을 기준으로 보는 것은 유지할 생각이다.
# 그림을 좀 그려야 정확히 알 수 있겠지만, 
# 당장으로는 점의 갯수가 1 + 2 * N에서 2의 N 제곱 만큼 증가하는 패턴으로 관찰돤다 -> 맞았다.

N = int(input())

dots = 1 + pow(2, N)

print(dots * dots)