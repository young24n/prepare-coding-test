# 단어 정렬

# 알파벳 소문자로 이루어진 N개의 단어가 들어오면 아래와 같은 조건에 따라 정렬하는 프로그램을 작성하시오.

# 길이가 짧은 것부터
# 길이가 같으면 사전 순으로

# 단, 중복된 단어는 하나만 남기고 제거해야 한다.

# 아마 모두 자동으로 될것이다. 
# 직접 해줘야하는 부분은 중복된 단어 제거인데 이것도 튜플을 사용하면 해결된다. 
# JS에서는 set을 이용했던 것 같다. 파이썬에도 똑같이 있다고 하니 이것을 이용하겠다.

# 사전순으로만 정렬해서 key로 길이 기준을 넣었다.
# ---
# 이 key 사용에 대해 잘 모를 수 있는데 

# key는 sort, sorted에 새로운 정렬 기준을 부여할 수 있다.
# key에는 함수만 넣을 수 있다. (다른걸 넣으면 오류난다) 
# key를 이용하여 정렬기준을 새로만들 경우 다음과 같은 절차가 일어난다.
# 1. 정렬 대상의 원소들을 하나씩 함수에 넣는다. 
# 2. 함수에 의해 변형된 값들을 정렬한다. (정렬 대상인 원본은 변형되지 않은 상태이다. 원본의 복사본을 만들어서 진행된다.) 
# 3. 변형된 값들을 정렬한 기준으로 원본 배열의 원소를 재배치 한다.

# 예를 들면 key=len 이렇게 줬다고 하자. len은 list나 text의 길이를 숫자로 반환해준다.
# 정렬 대상에 원소가 다음과 같이 들어있다고 해보자 ['hello', 'bye', 'good' ,'hi']
# 그러면 내부에 있던 원소들이 하나씩 len을 거치게 된다.(복사본을 이용해서 진행됨!) 
# -> [len('hello'), len('bye'), len('good') ,len('hi')]
# 그러면 이렇게 될 것이다. [5, 3, 4, 2]  
# 이것을 (함수에 다른 기준이 없으면 오름차순으로)정렬한다. 
# 그러면 [2, 3, 4, 5] 이렇게 된다. 해당 배치를 그대로 원본 요소들에게 적용시킨다. -> [hi, bye, good, hello]

# 그리고 key=lambda x: (len(x), x) 뭐 이런 것을 봤을 것이다. lambda는 임시 함수다. 자세한 것은 직접 찾아보아라 
# (len(x), x) 이건 튜플이다. 리스트에 튜플들이 요소로 있으면 정렬할 때 다른 기준이 적용되는데
# 튜플에 요소가 2개 이상 있을 때 첫 번째 요소를 비교하고 첫 번째 요소가 같다면 두 번째 요소를 비교한다. 세 번째 부터도 마찬가지다.
# 튜플 자료형은 정렬시 이런 특이한 정렬 기준이 부여된다. 이것을 이용해 key를 이용할 때 반환된 원소들이 튜플이면 여러 조건을 부여 할 수 있다.
# (왜냐고 생각 하지말 것 파이썬의 규칙 같은 것이다. 우주에 중력이 왜 존재하는지 생각하지 않듯이 그냥 그렇게 설정된 것으로 이해하면된다.)  

n = int(input())

words = []

for i in range(n):
    words.append(input())

target = sorted(set(words), key=lambda x: (len(x), x))

for text in target:
    print(text)
