# 알고리즘 수업 - 알고리즘의 수행 시간 6

# 첫째 줄에 코드1 의 수행 횟수를 출력한다.
# 둘째 줄에 코드1의 수행 횟수를 다항식으로 나타내었을 때, 최고차항의 차수를 출력한다.
# 단, 다항식으로 나타낼 수 없거나 최고차항의 차수가 3보다 크면 4를 출력

# 변형된 MenOfPassion 알고리즘은 다음과 같다.
# MenOfPassion(A[], n) {
#     sum <- 0;
#     for i <- 1 to n - 2  
#         for j <- i + 1 to n - 1
#             for k <- j + 1 to n
#                 sum <- sum + A[i] × A[j] × A[k]; # 코드1
#     return sum;
# }
# 파이썬에 맞은 형태로 의사코드 수정
# for i in range(1, 7 - 1):
#     count = 0
#     for j in range(i + 1, 7):
#         for k in range(j + 1, 7 + 1):
#             count += 1 # 코드1
#     print(i," ",count)

# 5번 문제와 다른점이 있는데 i,j,k의 시작점이 각각 1, i+1, j+1 이라는 점이다.
# 이렇게 되면 j는 i보다 항상 1 이상 크고 k는 j보다 항상 1 이상 크다는 점이다 (i < j < k)

# 이 예외사항을 통해 알 수 있는 점을 파악하자
# 1, 1, 1 이런 경우는 불가능 하다. 
# i = 1인 경우 j는 1보다 무조건 커야하며 k는 그런 j보다 커야한다 -> (i < j < k)
# 이것으로 1,1,1 / 1,2,1 이것과 같이 중복된 숫자가 2개 이상 있는 조합의 경우는 불가능하다.

# 이것은 결국 서로 다른 3개의 값을 선택하는 것과 같게 된다. 
# 이를 조합이라 하는데 조합의 공식은 다음과 같다 (n=범위, r=선택할 수)
# C(n,r)=  n! / r!(n-r)!
# 여기서 범위는 입력으로 들어오니 그대로 둔다. r은 3개의 값을 선택함으로 3이다.

# 해당 공식을 풀어서 쓰면
# n! -> n * (n-1) * (n-2) * (n-3) * (n-4) * ...
# -----
# 3! -> 3 * 2 * 1
# (n-3)! = (n-3) * (n-4) * ...

# 여기서 n!, (n-3)!을 전개 했더니 (n-3)부터 같은 값을 가지는 것을 볼 수 있다. 
# 그래서 서로 약분하면 아래와 같이 남는다.
# n! -> n * (n-1) * (n-2) * [여기서 부터 분모와 약분됨](n-3) * (n-4) * ...
# r! -> 3! -> 3 * 2 * 1 = 6
# (n-3)! = [여기랑 약분됨](n-3) * (n-4) * ...

# n * (n-1) * (n-2) / 3! = 실행 횟수
# 이것을 전개하면 
# n^3 - 3n^2 + 2n  / 6 = 실행 횟수
# 최고 차항은 3이다. 이렇게 해도 되지만 그냥 반복문이 3중첩인 것을 보고 해도 된다.
n = int(input())

print(n * (n-1) * (n-2) // 6) # 실행횟수
print(3) # 최고차항 차수
