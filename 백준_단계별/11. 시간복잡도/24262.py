# 알고리즘 수업 - 알고리즘의 수행 시간 1

# 입력의 크기 n이 주어지면 MenOfPassion 알고리즘 수행 시간을 예제 출력과 같은 방식으로 출력해보자.
# MenOfPassion 알고리즘은 다음과 같다.
# MenOfPassion(A[], n) {
#     i = n / 2;
#     return A[i]; # 코드1
# }

# 첫째 줄에 코드1 의 수행 횟수를 출력한다.
# 둘째 줄에 코드1의 수행 횟수를 다항식으로 나타내었을 때, 최고차항의 차수를 출력한다.
# 단, 다항식으로 나타낼 수 없거나 최고차항의 차수가 3보다 크면 4를 출력

# 시간 복잡도 분석의 기초문제
# 1. 수행 횟수 세기
# 2. 다항식으로 표현하기
# 3. 최고차항 찾기 (가장 큰 영향력을 주는 항 -> 해당 알고리즘의 성능)
# 간단히 말하자면 시간 복잡도는 
# (반복문이)입력이 들어올 때 어떻게 처리하는지 + 반복문의 갯수(중첩이든 갯수든 뭐든)

# 반복문이 2번 중첩되어있다면 보통 N^2으로 해석 가능하다. (물론 입력값이 어떻게 적용되냐에 따라 다르다)
# 반복문이 2번 나란히 있다면 보통 N * 2로 해석 가능하다.
# 반복문 내부/외부에서 반복문에 영향을 주는 입력 또한 확인해야 한다.
# 예를 들면 내부/외부 입력값을 곱하거나 제곱된 또는 나눠지는 상태로 반복문에 사용된다면 이것 또한 영향을 준다.

# 난 또 반복문을 만들어야 하는 줄 알았는데 그냥 정말 순수하게 해당 알고리즘만 가지고 테스트 하는 거였다.
# 반복문도 뭣도 없다 N / 2 계산하지만 이것이 반복문에 영향을 주는 것도 아니다.
# 해당 함수(알고리즘)는 리스트 A의 i 번째 인덱스를 조회하는 단 한 번의 실행 횟수만을 가진다.
# 당연히 반복문이 없으니 차수 또한 0이다. N^0은? 항상 1이다. 딱 한 번 실행된다.
# 함수를 실행시킬 필요조차 없다. 
# 반복횟수 1 차수는 0 고정이니깐 
# 실행 의의를 찾자면 디버깅으로 N을 직접 입력해보고(1~500,000) 차이가 있는지 확인하는 것이 전부다.

input()
print(1)
print(0)