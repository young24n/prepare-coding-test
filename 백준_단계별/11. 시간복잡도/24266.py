# 알고리즘 수업 - 알고리즘의 수행 시간 5

# 첫째 줄에 코드1 의 수행 횟수를 출력한다.
# 둘째 줄에 코드1의 수행 횟수를 다항식으로 나타내었을 때, 최고차항의 차수를 출력한다.
# 단, 다항식으로 나타낼 수 없거나 최고차항의 차수가 3보다 크면 4를 출력

# 변형된 MenOfPassion 알고리즘은 다음과 같다.
# MenOfPassion(A[], n) {
#     sum <- 0;
#     for i <- 1 to n
#         for j <- 1 to n
#             for k <- 1 to n
#                 sum <- sum + A[i] × A[j] × A[k]; # 코드1
#     return sum;
# }

# 3회 중첩되어있고 입력값이 따로 처리되어있지 않다.
# 따라서 O(n^3) 수행 횟수 또한 이를 따라간다.

# 각 반복문의 범위를 보자 
# i: 1~n
# j: 1~n 
# k: 1~n
# 단순하게 N^3 이라 했지만 n * n * n과 같다.
# 이걸보니 뭔가 떠오르는게 있는가? 
# 본인은 경우의 수가 생각이 났다.

# 조금 풀어서 보자면 N = 3 일 경우
# 각 i,j,k 범위는 1~3가 된다. 각각 3회 실행된다는 것이다.
# i가 있는 반복문이 1이 될때 j는 1, 2, 3 을 순회하며 총 3회 실행된다.
# 그리고 k는 j가 1일때 = 1,2,3 2일때 = 1,2,3 3일때 = 1,2,3 총 9회 실행된다.
# 경우의 수 같지 않나? 
# i=1, j=1 ,k=1 1회
# i=1, j=1 ,k=2 1회
# i=1, j=1 ,k=3 1회
# i=1, j=2 ,k=1 1회
# i=1, j=2 ,k=2 1회
# i=1, j=2 ,k=3 1회
# i=1, j=3 ,k=1 1회
# i=1, j=3 ,k=2 1회
# i=1, j=3 ,k=3 1회
# i=2, j=1 ,k=1 1회
# i=2, j=1 ,k=2 1회
# i=2, j=1 ,k=3 1회
#...

# 각 숫자가 지정될 때 "코드1"이 한 번 실행된다.
# 이 순차적인 모든 숫자의 조합을 구한 다음 더하면 결국 총 실행 횟수가 된다.
# 이것을 간단하게 3*3*3(n*n*n)으로 표현하는 것이다. 
# 이것을 중복을 허용한 순열이라고 부른다.(왜 중복을 허용하냐면 i,j,k가 같은 값을 가질 수 있기 때문 ex: i=1,j=1,k=1)

print(int(input()) ** 3)
print(3)
