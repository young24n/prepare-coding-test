# 약수들의 합

# 어떤 숫자 n이 자신을 제외한 모든 약수들의 합과 같으면, 그 수를 완전수라고 한다.
# 예를 들어 6은 6 = 1 + 2 + 3 으로 완전수이다.
# n이 완전수인지 아닌지 판단해주는 프로그램을 작성

# 입력으로 숫자가 라인마다 테스트 케이스로 입력되며 종료 입력으로 '-1' 이 마지막에 주어진다.
# n이 완전수라면 해당 약수들의 합을 출력하고, 이때 약수들은 오름차순으로 출력
# n이 완전수가 아니라면 n is NOT perfect. 를 출력
# 각 테스트 케이스에 대해 다음과 같은 형식으로 출력하면 된다
# 6 = 1 + 2 + 3
# 12 is NOT perfect.
# 28 = 1 + 2 + 4 + 7 + 14

# 약수를 구하는 문제와 같다. 우선 입출력 스트림이 다를 것이고 딱히 요구사항도 없으니 입출력을 반복시킨다.

# 입력으로 N을 입력받는다.
# 반복문을 이용해 1~N까지 순차적으로 증가하는 정수를 이용하여 약수를 구하고 이를 list에 저장한다.
# list 내부 값을 모두 더했을 때 N과 같다면 계산식을 출력하고 아니라면 완전수가 아니라고 출력한다.
# 해당 과정을 -1이 입력될 때까지 진행하는 while을 이용한 무한 루프를 만든다.


while True:
    N = int(input())
    if N == -1:
        break
    factors = []

    for i in range(1, N): 
        if N % i == 0:
            factors.append(i)
    
    if sum(factors) == N:
        factors_str = ' + '.join(map(str, factors))
        print(f"{N} = {factors_str}")
        
    else:
        print(str(N) + ' is NOT perfect.')