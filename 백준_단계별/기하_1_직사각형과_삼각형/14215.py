# 세 막대

# 세 막대를 이용해서 아래 조건을 만족하는 삼각형을 만들려고 한다.

# 영선이는 길이가 a, b, c인 세 막대를 가지고 있고, 각 막대의 길이를 마음대로 줄일 수 있다. <-- 여기
# 각 막대의 길이는 양의 정수이다
# 세 막대를 이용해서 넓이가 양수인 삼각형을 만들 수 있어야 한다.
# 삼각형의 둘레를 최대로 해야 한다.
# a, b, c가 주어졌을 때, 만들 수 있는 가장 큰 둘레를 구하는 프로그램을 작성

# 문제가 직관적이지 않은데 간단하게 설명하자면
# A, B, C가 주어지면 이걸로 삼각형을 만들어서 둘레를 구하면 된다. 
# 삼각형의 공식: 가장 긴 변의 길이가 나머지 2개의 변의 길이를 더한 것 보다 작하야 함
# 여기서 A, B, C 는 막대의 최대 길이이다. 
# 즉 여기서 A,B,C의 길이를 줄이는 행위만 가능하다. (이는 문제 첫번째 줄에 적혀있다.)
# 입력값으로 삼각형이 불가능한 값이 제공되었을 때 길이를 임의로 줄여서 최대한의 둘레를 가진 삼각형을 도출하는 문제이다.
# 참고로 둘레를 구하는 공식은 A+B+C이다. 
# 삼각형 구현 가능한 만큼 가장 긴 막대를 줄인다음 둘레를 구하면 될 듯 하다.

# 입력값을 받으면 3개중에서 가장 큰 값을 찾는다. max()를 이용하면 될 것 같다.
# 막대 길이는 공백기준으로 구분되어서 한줄에 입력된다. map input split을 쓰면 된다.
# 가장 큰 값과 나머지 값을 비교해서 삼각형 조건이 된다면 그대로 둘레를 구한다.
# 만약 아니라면 가장 큰 값과 나머지를 더한 값의 차를 구하여 가장 긴 막대를 얼마나 줄여야 할지 구한다.
# 가장 긴 막대를 줄인 둘레를 출력한다.

A,B,C = map(int, input().split(' '))

maxStick = max([A,B,C])
othersSum = A+B+C-maxStick


if maxStick < othersSum:
    print(A+B+C)
else:
    # 트릭: 정직하게 구해도 됨 다만 트릭도 있음
    # 가장 긴 막대는 결국 무조건 나머지 두 변의 합보다 1 작아야 함 --> othersSum - 1 <-- 가장 긴 막대(무조건 확정) 
    # 가장 긴 막대(A) + 나머지 막대1(B) + 나머지 막대2(C) = 둘레 
    # 현재 가장 긴막대(A)는 othersSum - 1 이것, B + C 는 이미 있음 -> othersSum  
    # 그래서 이러한 식을 가짐 -> othersSum * 2 - 1 = 둘레 
    print(othersSum * 2 - 1) 
